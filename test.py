from package import (
    os,
    streamlit as st,
    SentenceTransformer,
    faiss
)

from RAG import (
    Sematic_search,
    Answer_Question_From_Documents,
)

from read_file import Read_File_CSV






def colored_text(text : str, color : str) -> str:
    return f"<span style='color:{color}'>{text}</span>"

def typewriter_effect(text, speed=0.03):
    display_text = ""
    for char in text:
        display_text += char
        placeholder.markdown(f"""
            <div style="
                background-color: #E6F4FF; 
                padding: 15px; 
                border-radius: 10px; 
                margin-bottom: 10px; 
                border-left: 4px solid #4169E1; 
                color: black; 
                font-family: 'Courier New', monospace;
                font-size: 16px;
            ">
                {display_text}
            </div>
        """, unsafe_allow_html=True)
        time.sleep(speed)

# Page configuration
st.set_page_config(
    page_title="Tr·ª£ l√Ω V·∫≠t l√Ω AI",
    page_icon="‚öõÔ∏è",
    layout="wide",
    initial_sidebar_state="expanded"
)

@st.cache_resource
def Vector_Database() -> faiss:
    index : faiss = faiss.read_index("vector_database/vector_database.faiss")
    return index

@st.cache_resource
def load_model():
    return SentenceTransformer("all-MiniLM-L6-v2")

model = load_model()
vector_database = Vector_Database()
# ƒê·∫£m b·∫£o m√†u n·ªÅn v√† c√°c m√†u ch√≠nh ƒë∆∞·ª£c √°p d·ª•ng m·∫°nh h∆°n
st.markdown("""
<style>
    /* Thi·∫øt l·∫≠p c·ª• th·ªÉ m√†u s·∫Øc kh√¥ng ph·ª• thu·ªôc v√†o c·∫•u h√¨nh theme */
    :root {
        --primary-color: #4169E1;
        --background-color: #F0F8FF;
        --secondary-bg-color: #E6E6FA;
        --text-color: #333333;
    }
    
    /* M√†u n·ªÅn cho to√†n b·ªô ·ª©ng d·ª•ng */
    body {
        background-color: var(--background-color) !important;
        color: var(--text-color) !important;
    }
    
    /* M√†u cho c√°c th√†nh ph·∫ßn ch√≠nh */
    .stApp {
        background-color: var(--background-color) !important;
    }
    
    /* Sidebar */
    section[data-testid="stSidebar"] {
        background-color: var(--secondary-bg-color) !important;
    }
    
    /* C√°c n√∫t v√† widget */
    button, .stButton button, .stTextInput input, .stTextArea textarea {
        border-color: var(--primary-color) !important;
    }
    
    button:hover, .stButton button:hover {
        border-color: var(--primary-color) !important;
        color: var(--primary-color) !important;
    }
    
    /* Header */
    h1, h2, h3, h4, h5, h6 {
        color: var(--primary-color) !important;
    }
</style>
""", unsafe_allow_html=True)

# Custom styling
st.markdown("""
<style>
    /* Ki·ªÉu d√°ng t·ªïng th·ªÉ */
    .stApp {
        max-width: 1200px;
        margin: 0 auto;
    }
    
    /* Ki·ªÉu cho tin nh·∫Øn trong chat */
    .chat-message {
        padding: 1.5rem;
        border-radius: 0.75rem;
        margin-bottom: 1rem;
        display: flex;
        flex-direction: column;
        box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        transition: all 0.3s ease;
    }
    .chat-message.user {
        background-color: #E6F4FF;
        border-left: 5px solid #4169E1;
    }
    .chat-message.assistant {
        background-color: #F0F0F0;
        border-left: 5px solid #9370DB;
    }
    .chat-message .message-content {
        margin-left: 0.5rem;
        padding-left: 1rem;
        line-height: 1.6;
    }
    .chat-message:hover {
        box-shadow: 0 5px 15px rgba(0,0,0,0.1);
        transform: translateY(-2px);
    }
    
    /* Ki·ªÉu cho sidebar */
    .stSidebar .sidebar-content {
        padding: 1rem;
    }
    .chat-history-item {
        padding: 0.75rem;
        margin-bottom: 0.5rem;
        border-radius: 0.5rem;
        background-color: #F0F0F0;
        font-size: 0.9rem;
        border-left: 3px solid #4169E1;
        transition: all 0.2s ease;
    }
    .chat-history-item:hover {
        background-color: #E6F4FF;
        transform: translateX(3px);
    }
    
    /* Ki·ªÉu cho header */
    .app-header {
        display: flex;
        align-items: center;
        gap: 1rem;
        margin-bottom: 2rem;
        background: linear-gradient(to right, #E6F4FF, #F0F8FF);
        padding: 1rem;
        border-radius: 10px;
    }
    .header-title {
        font-size: 1.8rem;
        font-weight: bold;
        color: #4169E1;
        text-shadow: 1px 1px 2px rgba(0,0,0,0.1);
    }
    .physics-icon {
        height: 3.5rem;
        margin-right: 0.5rem;
        animation: pulse 2s infinite;
    }
    
    /* Ki·ªÉu cho c√¢u h·ªèi g·ª£i √Ω */
    .suggestion-box {
        background-color: #E6F4FF;
        padding: 10px;
        border-radius: 8px;
        margin-bottom: 8px;
        cursor: pointer;
        border-left: 3px solid #4169E1;
        transition: all 0.2s ease;
    }
    .suggestion-box:hover {
        background-color: #D1E6FF;
        transform: translateY(-2px);
        box-shadow: 0 3px 10px rgba(0,0,0,0.1);
    }
    
    /* Hi·ªáu ·ª©ng */
    @keyframes pulse {
        0% { transform: scale(1); }
        50% { transform: scale(1.05); }
        100% { transform: scale(1); }
    }
    
    /* Responsive design */
    @media (max-width: 768px) {
        .chat-message {
            padding: 1rem;
        }
        .header-title {
            font-size: 1.5rem;
        }
    }
</style>
""", unsafe_allow_html=True)

# Custom styling
st.markdown("""
<style>
    /* Ki·ªÉu d√°ng t·ªïng th·ªÉ */
    .stApp {
        max-width: 1200px;
        margin: 0 auto;
    }

    ... (gi·ªØ nguy√™n c√°c style c≈©)

    /* ƒê·ªïi m√†u vi·ªÅn v√† n·ªÅn c·ªßa √¥ chat_input */
    div.stChatInputContainer {
        border: 2px solid white !important;
        border-radius: 25px !important;
        background-color: #000 !important;
        padding: 4px !important;
    }

    div.stChatInputContainer input {
        color: white !important;
        background-color: transparent !important;
        border: none !important;
    }
</style>
""", unsafe_allow_html=True)


# M·∫´u c√¢u h·ªèi v·∫≠t l√Ω ƒë·ªÅ xu·∫•t
sample_questions = [
    "ƒê·ªãnh lu·∫≠t Newton n√≥i g√¨ v·ªÅ chuy·ªÉn ƒë·ªông?",
    "C√¥ng th·ª©c E=mc¬≤ c√≥ √Ω nghƒ©a g√¨?",
    "T·∫°i sao b·∫ßu tr·ªùi c√≥ m√†u xanh?",
    "√Ånh s√°ng c√≥ ph·∫£i l√† s√≥ng hay h·∫°t?",
    "ƒê·ªãnh lu·∫≠t Ohm √°p d·ª•ng nh∆∞ th·∫ø n√†o trong m·∫°ch ƒëi·ªán?",
    "Thuy·∫øt t∆∞∆°ng ƒë·ªëi c·ªßa Einstein gi·∫£i th√≠ch hi·ªán t∆∞·ª£ng g√¨?"
]

# App header v·ªõi hi·ªáu ·ª©ng ƒë·∫πp
st.markdown('''
<div class="app-header">
    <div>
        <svg class="physics-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="#4169E1" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <circle cx="12" cy="12" r="10"></circle>
            <ellipse cx="12" cy="12" rx="10" ry="4" transform="rotate(45 12 12)"></ellipse>
            <ellipse cx="12" cy="12" rx="10" ry="4" transform="rotate(-45 12 12)"></ellipse>
            <circle cx="12" cy="12" r="1"></circle>
        </svg>
    </div>
    <div class="header-title">Tr·ª£ l√Ω V·∫≠t l√Ω AI</div>
</div>
''', unsafe_allow_html=True)

# Hi·ªÉn th·ªã gi·ªõi thi·ªáu ch√≠nh v√† c√¢u h·ªèi g·ª£i √Ω
st.markdown("### H√£y ƒë·∫∑t c√¢u h·ªèi v·ªÅ v·∫≠t l√Ω v√† t√¥i s·∫Ω gi√∫p b·∫°n gi·∫£i ƒë√°p!")

# Hi·ªÉn th·ªã c√¢u h·ªèi m·∫´u trong 2 c·ªôt
st.markdown("#### üí° M·ªôt s·ªë c√¢u h·ªèi g·ª£i √Ω:")
col1, col2 = st.columns(2)
with col1:
    for q in sample_questions[:3]:
        # st.markdown(f"""
        # <div style="background-color: #E6F4FF; padding: 10px; border-radius: 8px; margin-bottom: 8px; cursor: pointer; border-left: 3px solid #4169E1;" 
        #      onclick="document.querySelector('.stChatInputContainer input').value='{q}';document.querySelector('.stChatInputContainer button').click();">
        #     {q}
        # </div>
        # """, unsafe_allow_html=True)
        st.markdown(f"""
        <div style="background-color: #E6F4FF; padding: 10px; border-radius: 8px; margin-bottom: 8px; cursor: pointer; border-left: 3px solid #4169E1; color: black;" 
             onclick="document.querySelector('.stChatInputContainer input').value='{q}';document.querySelector('.stChatInputContainer button').click();">
            {q}
        </div>
        """, unsafe_allow_html=True)
with col2:
    for q in sample_questions[3:]:
        st.markdown(f"""
        <div style="background-color: #E6F4FF; padding: 10px; border-radius: 8px; margin-bottom: 8px; cursor: pointer; border-left: 3px solid #4169E1; color: black;" 
             onclick="document.querySelector('.stChatInputContainer input').value='{q}';document.querySelector('.stChatInputContainer button').click();">
            {q}
        </div>
        """, unsafe_allow_html=True)

# Initialize session state
list_chat_history = []

if "messages" not in st.session_state.keys():
    st.session_state.messages = [{"role": "assistant", "content": colored_text("Xin ch√†o! T√¥i l√† tr·ª£ l√Ω AI chuy√™n v·ªÅ V·∫≠t L√Ω. H√£y ƒë·∫∑t c√¢u h·ªèi v√† t√¥i s·∫Ω c·ªë g·∫Øng gi·∫£i ƒë√°p cho b·∫°n.","black")}]
# L·∫•y n·ªôi dung l·ªùi ch√†o
# Main content area with chat display
chat_container = st.container()

with chat_container:
    # Display chat messages
    for message in st.session_state.messages:
        print("test: ",message["role"])
        with st.chat_message(message["role"]):
            message_class = "assistant" if message["role"] == "assistant" else "user"
            st.markdown(f'<div class="chat-message {message_class}"><div class="message-content">{message["content"]}</div></div>', unsafe_allow_html=True)

# Sidebar with chat history and information
with st.sidebar:
    # Logo v√† ti√™u ƒë·ªÅ sidebar 
    st.markdown("""
    <div style="display: flex; align-items: center; margin-bottom: 20px;">
        <svg width="32" height="32" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M12 4.75L19.25 9L12 13.25L4.75 9L12 4.75Z" stroke="#4169E1" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
            <path d="M4.75 14L12 18.25L19.25 14" stroke="#4169E1" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
            <path d="M4.75 9V14" stroke="#4169E1" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
            <path d="M19.25 9V14" stroke="#4169E1" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
        </svg>
        <span style="font-size: 1.3rem; font-weight: bold; margin-left: 10px; color: #4169E1;">Tr·ª£ l√Ω V·∫≠t l√Ω</span>
    </div>
    """, unsafe_allow_html=True)
    
    st.markdown("## üìö L·ªãch s·ª≠ tr√≤ chuy·ªán")
    st.markdown('<div style="border-top: 2px solid #E6F4FF; margin: 10px 0;"></div>', unsafe_allow_html=True)
    print("context :", st.session_state.messages)
    if len(st.session_state.messages) > 1:  # Skip the initial greeting
        for i, message in enumerate(st.session_state.messages):        
            st.markdown(f"""
            <div class="chat-history-item">
                <div style="font-weight: bold; color: #4169E1; margin-bottom: 5px;">üìù C√¢u h·ªèi:</div>
                <div>{message["content"]}</div>
            </div>
            """, unsafe_allow_html=True)
    else:
        st.markdown('<div style="font-style: italic; color: #777;">Ch∆∞a c√≥ cu·ªôc tr√≤ chuy·ªán n√†o. H√£y b·∫Øt ƒë·∫ßu ƒë·∫∑t c√¢u h·ªèi!</div>', unsafe_allow_html=True)

# Function for generating LLM response
def generate_response(use_query):
    try:
        list_index = Sematic_search(model, vector_database, use_query,3).run()
        vector_tmp = list_index[0]
        vector = [int(i) for i in vector_tmp]
        datas = Read_File_CSV("dataset.csv").Read()

        list_context = [datas["Dap_an"][i] for i in vector]
        answer = Answer_Question_From_Documents(use_query,list_context).run()
        return answer

    except ZeroDivisionError as e:
        title = e
        return "L·ªói: {}".format(title)

# User input area at the bottom
prompt = st.chat_input("Nh·∫≠p c√¢u h·ªèi v·ªÅ v·∫≠t l√Ω c·ªßa b·∫°n...")
# Process user input
if prompt:
    try:
        # Format question to end with question mark
        prompt = prompt.replace(".", "?")
        if prompt[-1] != '?':
            if prompt[-1] == '.':
                prompt = prompt[:-1] + '?'
            else:
                prompt += '?'
    
        # Add user message to chat
        st.session_state.messages.append({"role": "user", "content": prompt})
    
        with st.chat_message("user"):
            st.markdown(f'<div class="chat-message user"><div class="message-content">{prompt}</div></div>', unsafe_allow_html=True)
    
        # Generate a response
        if st.session_state.messages[-1]["role"] != "assistant":
            with st.chat_message("assistant"):
                with st.spinner("ƒêang suy nghƒ©..."):
                    response = generate_response(prompt)
                    st.markdown(f'''
                    <style>
                        .chat-message .message-content {{
                            color: black;
                        }}
                    </style>
                    <div class="chat-message assistant">
                        <div class="message-content">{response}</div>
                    </div>''', unsafe_allow_html=True)
                    message = {"role": "assistant", "content": response}
                    st.session_state.messages.append(message)
                    st.rerun()  # Update the UI to show the new message immediately

    except Exception as e:
        with st.chat_message("assistant"):    
            st.error(f"L·ªói: {str(e)}")

